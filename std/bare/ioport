//-*-coding: mule-utf-8-unix; fill-column: 59; mode:c++ -*-
/** 
 * @file
 *
 * This file is a part of Bare Metal OS C++ library.
 *
 * @author Sergei Lodyagin <serg@kogorta.dp.ua>
 * @copyright (C) 2021 Cohorte ICT
 *
 */

#ifndef _BARE_IOPORTS_HEADER_
#define _BARE_IOPORTS_HEADER_

#include <cstdint>

// FIXME
#define IOWord class 

namespace bare {

namespace ioport {

// ioport has no fixed value also the same address for
// input and output could be 2 different ports.
// So the correct representation of an ioport is a pair of
// input and output iterators.

using address_t = std::uint16_t;

namespace io_
{

template<IOWord Word>
struct op;

template<>
struct op<std::uint8_t>
{
#ifdef LINUX
	static std::uint8_t input(address_t address) noexcept
	{
		return 0;
	}
#else
	std::uint8_t input(address_t address) noexcept
	{
		return 0; // FIXME not implemented
	}
#endif
};

} // namespace io_

namespace input
{

template<IOWord Word>
class port_iterator
{
public:
	using word_type = Word;
	using value_type = word_type;
	
	explicit constexpr port_iterator(address_t addr) : address(addr) {}
	
	word_type operator*() noexcept
	{
		return io_::op<word_type>::input(address);
	}

	port_iterator& operator++() noexcept { return *this; }

	port_iterator operator++(int) noexcept { return *this; }

private:
	address_t address;
};

template<IOWord Word>
class range_iterator
{
	template<address_t From, address_t To, IOWord Word2>
	friend class range;
public:
	using word_type = Word;
	using value_type = port_iterator<word_type>;

	constexpr range_iterator() : range_iterator(-1) {}
	
	value_type operator*() const noexcept
	{
		return value_type{address};
	}

	range_iterator& operator++() noexcept
	{
		address += sizeof(word_type);
		return *this;
	}

	range_iterator operator++(int) noexcept
	{
		range_iterator copy{*this};
		++(*this);
		return copy;
	}

	constexpr bool operator==(const range_iterator& o)
	{
		return address == o.address;
	}
	
	constexpr bool operator!=(const range_iterator& o)
	{
		return !operator==(o);
	}
	
protected:
	address_t address;

	explicit constexpr range_iterator(address_t addr)
		: address(addr / sizeof(word_type) * sizeof(word_type))
	{
	}
};

// represents ioport in the range [From; To]
template<address_t From, address_t To, IOWord Word>
class range
{
public:
	using word_type = Word;
	using value_type = port_iterator<word_type>;
	using const_iterator = range_iterator<word_type>;
	using iterator = const_iterator;
	using size_type = address_t;

	static_assert(From <= To);
	static_assert(From % sizeof(word_type) == 0);
	static_assert(To % sizeof(word_type) == 0);
	
	static constexpr iterator begin()
	{
		return iterator{From};
	}
	
	static constexpr iterator end()
	{
		return iterator{To + sizeof(word_type)};
	}
	
	static constexpr const_iterator cbegin()
	{
		return begin();
	}
	
	static constexpr const_iterator cend()
	{
		return end();
	}

	static constexpr size_type size()
	{
		return (To - From) / sizeof(word_type) + 1;
	}

	static constexpr size_type max_size()
	{
		return size();
	}

	static constexpr bool empty()
	{
		return size() == 0;
	}
};

} // namespace input

#if 0
namespace output
{

template<IOWord Word>
struct port_iterator
{
public:
	using word_type = Word;

	explicit constexpr port_iterator(address_t addr) : address(addr) {}
	
	proxy operator*() noexcept;

private:
	address_t address;
};

} // namespace output
#endif

} // namespace ioport

} // namespace bare

#endif
